var mkdirp = require('mkdirp');

Blockchain = function(blockchainConfig) {
  this.config = blockchainConfig;
}

Blockchain.prototype.generate_basic_command = function() {
  var config = this.config;
  var address = config.account.address;

  var cmd = "geth ";
  var rpc_api = ['eth', 'web3'];

  if (config.datadir !== "default") {
    cmd += "--datadir=\"" + config.datadir + "\" ";
    cmd += "--logfile=\"" + config.datadir + ".log\" ";
  }

  cmd += "--port " + config.port + " ";
  cmd += "--rpc ";
  cmd += "--rpcport " + config.rpcPort + " ";
  cmd += "--rpcaddr " + config.rpcHost + " ";
  cmd += "--networkid " + config.networkId + " ";
  cmd += "--rpccorsdomain \"" + config.rpcWhitelist + "\" ";

  if (config.minerthreads !== void 0) {
    cmd += "--minerthreads \"" + config.minerthreads + "\" ";
  }

  cmd += "--mine ";
  if (config.genesisBlock !== void 0) {
    cmd += "--genesis=\"" + config.genesisBlock + "\" ";
  }

  if (config.whisper) {
    cmd += "--shh ";
    rpc_api.push('shh')
  }

  cmd += '--rpcapi "' + rpc_api.join(',') + '" ';

  //TODO: this should be configurable
  cmd += "--maxpeers " + config.maxPeers + " ";

  if (config.account.password !== void 0) {
    cmd += "--password " + config.account.password + " ";
  }

  return cmd;
}

Blockchain.prototype.list_command = function() {
  return this.generate_basic_command() + "account list";
}

Blockchain.prototype.init_command = function() {
  return this.generate_basic_command() + "account new ";
}

Blockchain.prototype.run_command = function(address, use_tmp) {
  var cmd = this.generate_basic_command();
  var config = this.config;

  if (address !== void 0) {
    //cmd += "--unlock " + address + " ";
    cmd += "--unlock \"3eae982bb6d730ec827f4a9a1fbe0f18f0caedc7 57fd2ba7672eecbbc4083e34038180ab1181dbfd 3d993a353147573f6dc93edee8e46c44e517d87a 48d6221052a89f78157944fe9cac93d8629100d2 462b3c1ecce8db6738786eb6a20d7eedc4e38bca 4b455d8a2172624c380eba7a0e3eff83bcdd646b a53d7d7a2ef96dd936795c3204765c26af5a6c7e 023438027ba8bb94b67a4f1572adc8a4e0524095 ace9fa2986e3645448c2569657e4c63c6f9c4c24 2fa4390575a7a7d4ab7125c59c03589cd60cc6e8\""  + " ";
  }

  if (config.console_toggle) {
    cmd += "console";
  }

  if (config.mine_when_needed) {
    if (use_tmp) {
      cmd += "js /tmp/js/mine.js";
    }
    else {
      cmd += "js node_modules/embark-framework/js/mine.js";
    }
  }

  return cmd;
}

Blockchain.prototype.get_address = function() {
  var config = this.config;
  var address = null;

  if (config.account.init) {
    // ensure datadir exists, bypassing the interactive liabilities prompt.
    var newDir = mkdirp.sync(config.datadir);
    if (newDir) {
      console.log("=== datadir created");
    } else {
      console.log("=== datadir already exists");
    }

    console.log("running: " + this.list_command());
    result = exec(this.list_command());

    if (result.output.indexOf("Fatal") < 0) {
      console.log("=== already initialized");
      address = result.output.match(/{(\w+)}/)[1];
    } else {
      console.log("running: " + this.init_command());
      result = exec(this.init_command());
      address = result.output.match(/{(\w+)}/)[1];
    }
  }

  return address;
}

Blockchain.prototype.startChain = function(use_tmp) {
  var address = this.get_address();
  console.log("running: " + this.run_command(address, use_tmp));
  exec(this.run_command(address, use_tmp));
  
}

module.exports = Blockchain
